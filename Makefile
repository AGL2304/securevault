.PHONY: help build up down restart logs shell composer artisan migrate fresh seed test

# Aide
help:
	@echo "SecureVault - Commandes Docker disponibles:"
	@echo ""
	@echo "  build      - Construire les images Docker"
	@echo "  up         - D√©marrer tous les services"
	@echo "  down       - Arr√™ter tous les services"
	@echo "  restart    - Red√©marrer tous les services"
	@echo "  logs       - Afficher les logs"
	@echo "  shell      - Acc√©der au shell du container Laravel"
	@echo "  composer   - Installer les d√©pendances Composer"
	@echo "  artisan    - Ex√©cuter des commandes Artisan"
	@echo "  migrate    - Ex√©cuter les migrations"
	@echo "  fresh      - Migration fresh avec seeding"
	@echo "  seed       - Ex√©cuter les seeders"
	@echo "  test       - Ex√©cuter les tests PHPUnit"
	@echo "  setup      - Installation compl√®te du projet"
	@echo "  security   - V√©rification de s√©curit√©"
	@echo ""

# Construction des images
build:
	docker-compose build --no-cache

# D√©marrage des services
up:
	docker-compose up -d

# Arr√™t des services
down:
	docker-compose down

# Red√©marrage
restart:
	docker-compose restart

# Logs
logs:
	docker-compose logs -f

# Shell du container Laravel
shell:
	docker-compose exec app sh

# Installation des d√©pendances Composer
composer:
	docker-compose exec app composer install

# Commandes Artisan
artisan:
	docker-compose exec app php artisan $(filter-out $@,$(MAKECMDGOALS))

# Migrations
migrate:
	docker-compose exec app php artisan migrate

# Migration fresh avec seeding
fresh:
	docker-compose exec app php artisan migrate:fresh --seed

# Seeders
seed:
	docker-compose exec app php artisan db:seed

# Tests PHPUnit
test:
	docker-compose exec app php artisan test

# Configuration initiale compl√®te
setup: build up composer
	@echo "‚è≥ Attente du d√©marrage des services..."
	@sleep 10
	docker-compose exec app cp .env.example .env
	docker-compose exec app php artisan key:generate
	docker-compose exec app php artisan storage:link
	docker-compose exec app php artisan config:cache
	docker-compose exec app php artisan migrate:fresh --seed
	@echo "‚úÖ SecureVault est maintenant configur√© !"
	@echo "üåê Application: http://localhost"
	@echo "üìß MailHog: http://localhost:8025"
	@echo "üóÑÔ∏è  PhpMyAdmin: http://localhost:8080"

# V√©rifications de s√©curit√©
security:
	@echo "üîç V√©rification de la s√©curit√©..."
	docker-compose exec app php artisan config:show | grep -i encrypt
	docker-compose exec app php artisan route:list | grep -E "(login|register|password)"
	@echo "‚úÖ V√©rifications termin√©es"

# Installation des assets frontend
npm-install:
	docker-compose run --rm node npm install

# Compilation des assets
npm-dev:
	docker-compose run --rm node npm run dev

# Compilation pour la production
npm-prod:
	docker-compose run --rm node npm run prod

# Surveillance des changements
npm-watch:
	docker-compose run --rm node npm run watch

# Nettoyage complet
clean:
	docker-compose down -v
	docker system prune -f
	docker volume prune -f

# Backup de la base de donn√©es
backup:
	docker-compose exec mysql mysqldump -u root -proot_password_123 securevault > backup_$(shell date +%Y%m%d_%H%M%S).sql

# Restauration de la base de donn√©es
restore:
	@read -p "Nom du fichier de backup: " backup_file; \
	docker-compose exec -T mysql mysql -u root -proot_password_123 securevault < $$backup_file

%:
	@: